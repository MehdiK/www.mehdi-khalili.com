wrench = require('wrench')
fs = require('fs')
safeps = require('safeps')
pathUtil = require('path')

module.exports = (BasePlugin) ->
  class HerokuPlugin extends BasePlugin
    name: 'heroku'
    
    config: 
      deployRemote: 'heroku'
      deployBranch: 'master'
      environment: 'static'
      ignoredFiles: ['docpad.coffee', 'docpad.js', 'package.json', 'README.md', '.DS_Store', '.gitignore']
      herokuOutputPath: 'HerokuRepo'

    _doDeploy: (me,docpad) ->
      return (opts,next) -> 
        me = @
        herokuOutputPath = me.config.herokuOutputPath

        isDir = (fname) -> fs.statSync(fname).isDirectory()

        # Fetch latest DocPad configuration
        {outpath, rootPath} = docpad.getConfig()

        docpad.log 'info', 'Creating heroku directories'

        herokuFolderExists = fs.existsSync(herokuOutputPath)

        if !herokuFolderExists
          wrench.mkdirSyncRecursive(herokuOutputPath, 0o777)

        wrench.mkdirSyncRecursive(herokuOutputPath + "/out", 0o777)

        docpad.log 'info', 'Copying out directory to heroku directory'

        wrench.copyDirSyncRecursive('out', herokuOutputPath + "/out", { forceDelete: true, preserveFiles: false })

        docpad.log 'info', 'Copying root files to heroku directory'

        fs.readdir(rootPath, (err, files) ->
          for file in files
            if me.config.ignoredFiles.indexOf(file) == -1 and isDir(file) == false
              destination = fs.createWriteStream(herokuOutputPath + "/" + file)
              source = fs.createReadStream(file)
              source.pipe(destination)

          fs.renameSync(herokuOutputPath + '/herokupackage.json', herokuOutputPath + '/package.json'))

        docpad.log 'info', 'All required files copied over'

        outGitPath = pathUtil.join(herokuOutputPath,'.git')
        
        # Fetch latest DocPad configuration
        {outpath, rootPath} = docpad.getConfig()

        # Log
        docpad.log 'info', 'Removing old .git directory..' + outGitPath

        # Fetch the project's remote url so we can push to it in our new git repo
        safeps.spawnCommand 'git', ['config', "remote.#{me.config.deployRemote}.url"], {cwd:rootPath}, (err,stdout,stderr) ->
          # Extract
          remoteRepoUrl = stdout.replace(/\n/,"")

          docpad.log 'info', 'Remote Repo URL => ' + remoteRepoUrl 

          # Log
          docpad.log 'info', 'Fetching log messages...'

          # Fetch the last log so we can add a meaningful commit message
          safeps.spawnCommand 'git', ['log', '--oneline'], {cwd:rootPath}, (err,stdout,stderr) ->
            # Log
            docpad.log 'info', 'Performing push...'

            # Extract
            lastCommit = stdout.split('\n')[0]

            gitCommands = [
              ['add', '.']
              ['commit', '-m', lastCommit]
            ]

            if !herokuFolderExists
              gitCommands.splice(0, 0, ['init']) # if dir didn't exist we should initiate the git command
              gitCommands.push(['push', '--force', remoteRepoUrl, "master"])
            else
              gitCommands.push(['push', remoteRepoUrl, "master"])

            safeps.spawnCommands 'git', gitCommands, {cwd:herokuOutputPath,output:true}, (err,stdout,stderr) ->
              # Log
              docpad.log('info', 'Deployment to heroku completed successfully')

    # =============================
    # Events
    docpadReady: (opts) ->
      @docpad.setInstanceConfig({env:@config.environment})
      @docpad[@name] = @_doDeploy(@,@docpad)

    # Console Setup
    consoleSetup: (opts) ->
      config = @config
      # Prepare
      {consoleInterface,commander} = opts

      @docpad.setInstanceConfig({env:config.environment})

      docpad.log 'info', 'Heroku deployment started'

      # Deploy command
      commander
        .command('deploy-heroku')
        .description("deploys your #{config.environment} website to the #{config.deployRemote}/#{config.deployBranch} branch")
        .action consoleInterface.wrapAction @_doDeploy(@,@docpad)

      # Chain
      @